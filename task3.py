# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.

class Cell:
    def __init__(self, cnt_cell: int):
        self.cnt_cell = cnt_cell

    def __add__(self, other):
        return self.cnt_cell + other.cnt_cell

    def __sub__(self, other):
        if self.cnt_cell - other.cnt_cell > 0:
            return self.cnt_cell - other.cnt_cell
        else:
            return f"Клетка не получилась - во второй клетке ячеек больше чем в первой"

    def __mul__(self, other):
        return self.cnt_cell * other.cnt_cell

    def __truediv__(self, other):
        return self.cnt_cell // other.cnt_cell

    def make_order(self, row):
        text = ""
        for el in range(self.cnt_cell // row):
            text += f"{'*'*row}\n"
        text += f"{'*'*(self.cnt_cell % row)}"
        return text


x = Cell(20)
y = Cell(15)
print(x + y)
print(x - y)
print(x * y)
print(x / y)
print("\n")
print(x.make_order(6))
print("\n")
print(y.make_order(7))
